### Post to create a user
POST localhost:8000/auth/register/
Content-Type: application/json

{
    "username": "user",
    "password": "Pdm4w567!",
    "confirmed_password": "Pdm4w567!",
    "email": "email@email.com",
    "first_name": "first",
    "last_name": "last"
}

> {%
    //Test to see if the request was successful as it should be
    client.test("Request Success", function(){
        client.assert(response.body['success'] === true, "Request was not successful")
    })
    //Make sure the data returned matched the data sent
   client.test("User Created Correctly", function(){
       client.assert(response.status === 201, "User was not created")
       client.assert(response.body['user']['id'] === 1, "User ID was not created")
       client.assert(response.body['user']['username'] === "user", "Username was not created")
       client.assert(response.body['user']['email'] === "email@email.com", "Email was not created")
       client.assert(response.body['user']['first_name'] === "first", "First Name was not created")
       client.assert(response.body['user']['last_name'] === "last", "Last Name was not created")
   })

    //Make sure the status code is correct
    client.test("Status Code", function(){
        client.assert(response.status === 201, "Status Code was not 201")
    })
 %}

### Post To login
POST localhost:8000/auth/login/
Content-Type: application/json

{
    "username": "user",
    "password": "Pdm4w567!"
}

> {%
    //Test to see if the request was successful as it should be
    client.test("Request Success", function(){
        client.assert(response.body['success'] === true, "Request was not successful")
    })

    //Make sure data returned is correct
    client.test("data response is correct", function(){
        client.assert(response.body['user']['id'] === 1, "User ID was not created")
        client.assert(response.body['user']['username'] === "user", "Username was not created")
        client.assert(response.body['user']['email'] === "email@email.com", "Email was not created")
        client.assert(response.body['user']['first_name'] === "first", "First Name was not created")
        client.assert(response.body['user']['last_name'] === "last", "Last Name was not created")
    })

    //Make sure the status code is correct
    client.test("Status Code", function(){
        client.assert(response.status === 200, "Status Code was not 200")
    })

    //Set the access token to a global variable for later tests
    client.log("=== Login Response Debug ===");
    client.log("Response status:", response.status);

    if (response.status === 200) {
        // Log the raw response to see what we're getting
        client.log("Raw response body:", response.body);

        // Store the token
        const token = response.body.access;
        client.global.set("access_token", token);

        // Debug log to verify token
        client.log("Stored token:", client.global.get("access_token"));
    } else {
        client.log("Login failed");
        client.log("Response body:", response.body);
    }


 %}

### Get user data
GET localhost:8000/users/1/
Authorization: Bearer {{access_token}}

> {%
    // Check that the correct status was returned
    client.test("Status Code", function(){
        client.assert(response.status === 200, "Status is not 200")
  })
    // Check that the body of the response matches what is expected
    client.test("Body Test", function(){
        client.assert(response.body["id"] === 1, "Id was not 1")
        client.assert(response.body["username"] === "user", "Username was not user")
        client.assert(response.body["email"] === "email@email.com", "Incorrect email")
        client.assert(response.body["email_verified"] === false, "Email should not be verified")
        client.assert(response.body["first_name"] === "first", "First name was not first")
        client.assert(response.body["last_name"] === "last", "Last name was not last")
        client.assert(response.body["profile"] === null, "Profile should be null" )
    })
  %}

### Test DB Reset
POST localhost:8000/api/reset_db/
